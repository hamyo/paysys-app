import java.nio.file.Files
import java.nio.file.Paths

group 'paysys'
version '1.0-SNAPSHOT'

project.ext {
	jersey_version = '2.26'
	logback_version = '1.2.3'
    lombock_version = '1.18.8'
    jacksonVersion = '2.9.9'
}


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

apply plugin: 'java'
apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	mavenCentral()
}

compileJava.options.encoding = 'UTF-8'

dependencies {
	compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jersey_version"
	compile "org.glassfish.jersey.inject:jersey-hk2:$jersey_version"
	compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jersey_version"

	compile "commons-lang:commons-lang:2.6"

	compileOnly "org.projectlombok:lombok:$lombock_version"
	testCompile "org.projectlombok:lombok:$lombock_version"
    
    compile "com.typesafe.akka:akka-actor_2.11:2.5.12"
    
	compile "ch.qos.logback:logback-core:$logback_version"
	compile "ch.qos.logback:logback-classic:$logback_version"
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:2.28.2"
    testCompile "com.typesafe.akka:akka-testkit-typed_2.11:2.5.12"
}


jar.doFirst {
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes("Manifest-Version": "1.0",
                "Main-Class": "paysys.Application",
                "Class-Path": configurations.compile.collect { saveDep(it, buildDir.getAbsolutePath()) }.join(' '))
    }
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes("Manifest-Version": "1.0",
                "Main-Class": "paysys.Application")
    }
}

task migResources(dependsOn: 'jar') {
    def libs = file(buildDir.getAbsolutePath() + File.separator + "libs")
    if (!libs.exists()) {
        libs.mkdirs()
    }
    file(projectDir.absolutePath + File.separator + "src/main/resources").listFiles({ file -> file.getName().endsWith(".xml") || file.getName().endsWith(".properties") } as FileFilter).each { f ->
        def file = new File(libs, f.getName())
        if (!file.exists()) {
            OutputStream out = new FileOutputStream(file)
            Files.copy(Paths.get(f.getAbsolutePath()), out)
            out.close()
        }
    }
}

def saveDep(it, String path) {
    def libs = file(path + File.separator + "libs")
    if (!libs.exists()) {
        libs.mkdirs();
    }
    def dirName = "lib"
    def dir = file(path + File.separator + "libs" + File.separator + dirName)
    if (!dir.exists()) dir.mkdirs()
    if (it instanceof File) {
        Files.copy(Paths.get(it.absolutePath), new FileOutputStream(new File(dir, it.name)))
    }
    dirName + "/" + it.name
}